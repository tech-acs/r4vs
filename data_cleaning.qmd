---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Data cleaning

```{r setup, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse) ; library(knitr) ; library(janitor)
```

There are several simple routines that can help make the preparation of civil registration data for tabulation less time consuming. This chapter uses the [tidyverse](https://www.tidyverse.org/) suite of R packages to deal with common problems such as incorrect data types, duplicate rows, and missing values.

## Practice dataset

We will use a synthetic dataset (@tbl-synthetic) that has the appearance of civil registration data to practice with. The states of Nigeria are used but otherwise the data are completely fictional.

```{r, echo=FALSE}
#| label: tbl-synthetic
#| tbl-cap: "Synthetic dataset, first 5 rows"

n <- 1000
id <- sample(1:n)
birth1a <- sample(seq(as.Date("2024/05/01"), as.Date("2024/08/05"), by = "day"), n, replace = TRUE)
birth1c <- sample(c("Abia","Adamawa","Akwa Ibom","Anambra","Bauchi","Bayelsa","Benue","Borno","Cross River","Delta","Ebonyi","Edo","Ekiti","Enugu","Federal Capital Territory","Gombe","Imo","Jigawa" ,"Kaduna","Kano","Katsina","Kebbi","Kogi","Kwara","Lagos","Nassarawa","Niger","Ogun","Ondo","Osun","Oyo","Plateau","Rivers","Sokoto","Taraba","Yobe","Zamfara", ""), n, replace = TRUE)
birth1g <- sample(c("Single", "Twin", "Triplet", "Quadruplet or higher"), n, replace = TRUE)
birth1h <- sample(c("Doctor", "Nurse", "Midwife", "Other"), n, replace = TRUE)
birth1i <- sample(c("Hospital", "Home", "Clinic", "Other", "Unknown"), n, replace = TRUE)
birth2a <- sample(c("M", "F"), n, replace = TRUE)
birth3b <- sample(0:90, n, replace = TRUE)
raw <- data.frame(id, birth1a, birth1c, birth1g, birth1h, birth1i, birth2a, birth3b)

# add mischief
df <- raw |>
  mutate(
    birth1b = birth1a + sample.int(28, n, replace = TRUE), # add later registration date
    birth1b = case_when(
      id %in% sample.int(1000, 3, replace = TRUE) ~ ymd("1900-01-01"), TRUE ~ birth1b), # add incorrect date
    birth3b = ifelse(id %in% sample.int(1000, 10, replace = TRUE), NA, birth3b) # add some missing values
    ) |>
  mutate(birth1a = as.character(birth1a)) |> # coerce birth1a to character
  relocate(birth1b, .after = birth1a) |>
  remove_rownames()
  
df <- df |> bind_rows(slice(df, rep(1, 4))) # duplicate rows

kable(head(df, 5))
```

## Setup

Before we start we need to load the [tidyverse](https://www.tidyverse.org/) package. This will make available a range of handy functions for data manipulation.
```{r, eval=FALSE}
library(tidyverse)
```

Then we need to load our dataset using the  [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function. All you need to do is provide a path to your CSV file.
```{r, eval=FALSE}
df <- read_csv("data/practice_data.csv")
```

::: {.callout-tip}
## Parsing data types

Variables are parsed automatically with the `read_csv()` function but you can set data types for specific columns manually. For example, 

```{r, eval=FALSE}
df <- read_csv(
  "data/practice_data.csv",
  col_types = cols(
    x = col_character(),
    y = col_logical()
  )
)
```

:::

Then we can inspect our dataset. 
```{r}
glimpse(df)
```

There are `r ncol(df)` variables in our data:

- `id`
- `birth1a` (Date of occurrence, Event)
- `birth1b` (Date of registration, Event)
- `birth1c` (Place of occurrence, Event)
- `birth1g` (Type of birth, Event)
- `bith1h`  (Attendant at birth, Event)
- `birth1i` (Type of place of occurrence, Event)
- `birth2a` (Sex, Newborn)
- `birth3b` (Age, Mother)

The variable `birth1b` (Date of registration, Event) is of type date, `id` and `birth3b` (Age, Mother) integer, and the others are all character.

## Data de-identification
*Information that could identify individuals must be removed from the datatset.*

### Removing columns
Sometimes personal information can be left in a dataset. We can easily drop identifying variables with [`select()`](https://dplyr.tidyverse.org/reference/select.html). For example, if the `id` variable were actually a national identity number you could remove it with:

```{r, eval=FALSE}
df |> 
  select(-id)
```

## Valid
*Variables should conform to data types and values should fall within expected ranges.*

### Characters as dates
Dates can be inputted in a variety of formats such as "1 August 24", Aug 1, 2024", and "2024-08-01". Sometimes R will not be able to parse a date and will read it as a character. 

The variable `birth1a` (Date of occurrence, Event) is a character but it should be a date. We can coerce it to a date by passing it to the `as.Date()` function and choosing the corresponding date format. `birth1a` follows the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard for dates or 'YYYY-MM-DD' so we need to format the data with "%Y-%m-%d". 

```{r}
df <- mutate(df, birth1a = as.Date(birth1a, format = "%Y-%m-%d"))
class(df$birth1a)
```

```{r, echo=FALSE}
#| label: tbl-dates
#| tbl-cap: "Date formats in R"
#| 
date_formats <- tribble(
  ~Symbol, ~Description, ~Example,
  "%d", "Day as a number", "01-31",
  "%a", "Abbreviated weekday", "Wed",
  "%A", "Unabbreviated weekday", "Wednesday",
  "%m", "Month as a number", "1-12",
  "%b", "Abbreviated month", "Feb",
  "%B", "Unabbreviated month", "February",
  "%y", "2-digit year", "24",
  "%Y", "4-digit year", "2024"
)
kable(date_formats)
```

You can also use the [`ymd()`](https://lubridate.tidyverse.org/reference/ymd.html) function which more intuitively transforms the date into year, month, and day. 

```{r, eval=FALSE}
mutate(df, birth1a = ymd(birth1a))
```

We can see that some registration dates have been entered as "1900-01-01".

### Characters as factors
It is common practice to read known values of a variable as characters, hence `stringsAsFactors = FALSE`. However, once you have read in the data you may wish to convert a character variable into a factor. Here we are converting `birth1g` (Type of birth, Event) into a factor.
```{r}
class(df$birth1g)
df$birth1g <- as_factor(df$birth1g)
class(df$birth1g)
```

### Remove white space
Leading and trailing white space can easily be coded in error with manual data entry. We can get rid of these blank characters with the [`str_squish()`](https://stringr.tidyverse.org/reference/str_trim.html) function from the [`stringr`](https://stringr.tidyverse.org) package.
```{r}
str_squish(" Federal    Capital Territory")
```

### Values within expected range
Sometimes there can be rogue values in a dataset that have been entered in error. We can check for these by calculating some summary statistics. The [`skim()`](https://docs.ropensci.org/skimr/reference/skim.html) function from the [`skimr`](https://docs.ropensci.org/skimr/index.html) package prints the average, quartiles and a neat histogram.

```{r, eval=FALSE}
library(skimr)
skim(df, "birth3b")
```

```{r, echo=FALSE}
stats <- skimr::skim(df, "birth3b")
print(stats, include_summary = FALSE)
```

### Wrong order of levels
Sometimes the order of levels in a factor variable is not very helpful. The [`fct_relevel()`](https://forcats.tidyverse.org/reference/fct_relevel.html) function allows you to customise the order of levels. Here we reorder the values of `birth1g` (Type of birth, Event) so that "Single" comes first, then "Twin" etc.
```{r}
df$birth1g |> levels()
df$birth1g |> fct_relevel("Single", "Twin", "Triplet", "Quadruplet or higher") |> levels()
```

### Recode values
Often values of a variable are coded unhelpfully. For example, in `birth2a` (Sex, Newborn) the sex of the newborn baby has been recorded as "M" and "F". We can easily recode these so that they are more readable. The [`fct_recode()`](https://forcats.tidyverse.org/reference/fct_recode.html) function enables you to change factor levels by hand.
```{r}
df$birth2a |> 
  fct_recode(Female = "F", Male = "M") |> 
  levels()
```

You can also use the [`case_match()`](https://dplyr.tidyverse.org/reference/case_match.html) function within [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html).
```{r, eval=FALSE}
df |>
  mutate(birth2a = case_match(birth2a, "F" ~ "Female", "M" ~ "Male"))
```

## Accurate
*There should be no conflicting information in the dataset.*

### Dates out of sequence
There may be inputting errors in the civil registration data such as `birth1a` (Date of occurrence, Event) being recorded *after* `birth1b` (Date of registration, Event). To identify those records that are out of sync we can use a simple filter. The code below selects all of the rows where `birth1a` (Date of occurrence, Event) is *after* `birth1b` (Date of registration, Event) and prints out selected columns.

```{r}
filter(df, birth1a > birth1b) |> 
  select(id, birth1a, birth1b)
```

## Complete
*There should be no missing or duplicate cases in the dataset.*

### Identifying duplicate rows
We can identify duplicate rows by using the [`get_dupes()`](https://sfirke.github.io/janitor/reference/get_dupes.html) function from the [janitor](https://sfirke.github.io/janitor) package. The function will return any duplicate records and add a `dupe_count` column containing the number of duplicates. You just need to supply a unique identifier e.g. `id`` or a unique combination of columns. 

```{r}
df |> 
  get_dupes(id)
```

### Removing duplicates
To drop duplicate rows whilst retaining the first row we can use the [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) function. Remember to pass the argument `.keep_all = TRUE` to keep **all** the variables not just the unique identifier.
```{r, eval=FALSE}
df |>
  distinct(id, .keep_all = TRUE)
```

### Convert values to NA
Missing values are recorded in a variety of ways e.g. 999999, NULL, or even " ". We can recode these missing values to a more explicit NA using the [`na_if()`](https://dplyr.tidyverse.org/reference/na_if.html) function. The variable `birth1c` (Place of occurrence, Event) includes a number of missing values that have been recorded as  " ". We can replace these with NA using the code below.
```{r}
df <- mutate(df, birth1c = na_if(birth1c, ""))
```

You can also use the `case_match()` function as an alternative.
```{r}
df <- mutate(df, birth1c = case_match(birth1c, NA ~ "", .default = birth1c))
```

### Checking missing data
To identify how many missing values there are in the whole dataset we can run:
```{r}
df |> map_dbl(~sum(is.na(.)))
```

There are `r sum(is.na(df$birth1c))` NA values in `birth1c` (Place of occurrence, Event) and `r sum(is.na(df$birth3b))` in `birth3b` (Age, Mother). 

### Fill missing value with previous value
Sometimes values are not explicit in a dataset. For example, you might have some population data and only the first value explicitly records the sex.

```{r, echo=FALSE}
pop <- tribble(
  ~Age, ~Sex, ~Population,
  "0-4", "Male", 9432700,
  "5-9", NA, 7875387,
  "10-14", NA, 7088327,
  "15-19", NA, 6159773,
  "20-24", NA, 5139436,
  "25-29", NA, 4238963,
  "30-34", NA, 3443384,
  "35-39", NA, 2756472,
  )
```


```{r}
kable(pop)
```

We can solve this problem with the `fill()` function which takes the previous value and uses it to fill subsequent missing values.

```{r, eval=FALSE}
pop |> fill(Sex)
```

```{r, echo=FALSE}
pop |> fill(Sex) |>  kable()
```

### Imputing missing data
In cases where there are missing values in an integer variable we can impute them as an average. For example, there are `r sum(is.na(df$birth3b))` missing values in `birth3b` (Age, Mother). We can impute the mean age with the following code.
```{r}
df <- df |> 
  mutate(birth3b = case_when(
    is.na(birth3b) ~ as.integer(mean(birth3b, na.rm = TRUE)),
    TRUE ~ birth3b)
    )
```