[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Vital Statistics",
    "section": "",
    "text": "Welcome\nThis book is a companion to the vsreport package which automates the creation of vital statistics tables in R.\nThis book was last rendered on 07 October 2024.\nLicense\nThis book is available free to read and is licensed under the CC BY-NC-ND 4.0 International License. This means that the book can be shared and redistributed as long as appropriate credit is given to the authors.\nAcknowledgments\nR4VS is a collaborative effort and we welcome fixes and improvements to the content."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Welcome to this guide to creating publication ready vital statistics tables and graphics…"
  },
  {
    "objectID": "setup.html#download-and-install-r",
    "href": "setup.html#download-and-install-r",
    "title": "\n2  Setup\n",
    "section": "\n2.1 Download and install R",
    "text": "2.1 Download and install R\nTo download R go to https://cloud.r-project.org/. There are different downloads for Windows, MacOS and Linux operating systems.\nThere’s normally a major update to R each year so it is recommended that you update your version of R regularly."
  },
  {
    "objectID": "setup.html#download-and-install-rstudio",
    "href": "setup.html#download-and-install-rstudio",
    "title": "\n2  Setup\n",
    "section": "\n2.2 Download and install RStudio",
    "text": "2.2 Download and install RStudio\nRStudio is an integrated development environment (IDE) for R. This is essentially a more user friendly way of interacting with R.\nYou can download and install RStudio from https://posit.co/download/rstudio-desktop. Versions are available for Windows 10/11, macOS 12+ and other operating systems.\nRStudio is updated regularly but reminders to update will periodically pop up.\nOpen up RStudio and select File &gt; New File &gt; R script. An untitled R script will appear in the Source pane. Now copy and paste the code below into the window. Then Ctrl+A the code and hit Ctrl+Enter to run it.\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\nggplot(mtcars, aes(mpg, wt)) +\n  geom_point()\n\nIf you see a scatter plot like this then your installation of R and RStudio has been successful."
  },
  {
    "objectID": "setup.html#download-and-install-git",
    "href": "setup.html#download-and-install-git",
    "title": "\n2  Setup\n",
    "section": "\n2.3 Download and install Git",
    "text": "2.3 Download and install Git\nFirst we’ll check whether you already have Git on your computer. Open the Command Prompt (find the Search Bar and enter “cmd”) and run: git --version. The Git version you’re currently using will be returned. If git: command not found or similar is returned then you need to download and install Git.\nIf you are using Windows and have admin rights then go to https://git-scm.com/download/win and download the Standalone Installer for 64-bit.\n\n\n\n\n\n\nNote\n\n\n\nNote that RStudio requires a 64-bit operating system.\n\n\nRun through the installation process and accept all of the default settings. Downloads for other operating systems are available at https://git-scm.com/download."
  },
  {
    "objectID": "setup.html#register-for-a-free-github-account",
    "href": "setup.html#register-for-a-free-github-account",
    "title": "\n2  Setup\n",
    "section": "\n2.4 Register for a free GitHub account",
    "text": "2.4 Register for a free GitHub account\nGitHub accounts are free. All you need to do is provide an email address, password and a unique username. There are some tips on creating a GitHub username here. Once you have completed the sign up process you can visit your dashboard and update your profile."
  },
  {
    "objectID": "implementation_info.html#the-organisational-landscape",
    "href": "implementation_info.html#the-organisational-landscape",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.1 The Organisational Landscape",
    "text": "3.1 The Organisational Landscape\nWhat is the legislation around civil registration and the relevant statistics? Which organisation owns the data, which organisation produces demographic statistics? What are the data users and how does information get shared?"
  },
  {
    "objectID": "implementation_info.html#the-data-collection-and-handling-process",
    "href": "implementation_info.html#the-data-collection-and-handling-process",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.2 The Data Collection and Handling Process",
    "text": "3.2 The Data Collection and Handling Process\nHow is the data generated? How is it collected and the data set built? Who has responsibility to make sure that the data is correct? Who should train the data collectors? Are there variable definitions? Is there a schedule in place of when data deliveries should happen?"
  },
  {
    "objectID": "implementation_info.html#variable-availability-and-possible-tables",
    "href": "implementation_info.html#variable-availability-and-possible-tables",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.3 Variable Availability and Possible tables",
    "text": "3.3 Variable Availability and Possible tables\nFrom the data available, what tables are possible to be generated? What is the relevant aggregation level from a spatial point of view? Are there any tables that are of high interest that may need extra data collection?"
  },
  {
    "objectID": "implementation_info.html#codebase-management-and-collaboration-principles",
    "href": "implementation_info.html#codebase-management-and-collaboration-principles",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.4 Codebase Management and Collaboration Principles",
    "text": "3.4 Codebase Management and Collaboration Principles\nHow is the code created and stored? Is there a version control mechanism? This can ensure the system is resilient to people moving. Is there a peer-review procedure in place? Is the code tested on sample data?"
  },
  {
    "objectID": "implementation_info.html#data-quality-analysis",
    "href": "implementation_info.html#data-quality-analysis",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.5 Data Quality Analysis",
    "text": "3.5 Data Quality Analysis\nWhat are the issues with the data? Are there known delivery problems? Are there variables that have a high level of missingness? What can be done to solve this?"
  },
  {
    "objectID": "implementation_info.html#data-cleaning-and-dataset-curation",
    "href": "implementation_info.html#data-cleaning-and-dataset-curation",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.6 Data Cleaning and Dataset Curation",
    "text": "3.6 Data Cleaning and Dataset Curation\nOnce the data quality has been evaluated, some decisions need to be made on how the data can be cleaned. From this, a curated or clean dataset can be used to generate tables with a clear understanding of what the issues are. This curated dataset can build trust and automation on the latter part of the system."
  },
  {
    "objectID": "implementation_info.html#table-generation-with-crvsreportpackage",
    "href": "implementation_info.html#table-generation-with-crvsreportpackage",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.7 Table Generation with crvsreportpackage",
    "text": "3.7 Table Generation with crvsreportpackage\nThe implementation of the crvsreportpackage can be carried out from this point. The same principles applied to this can be applied to generate different tables that may be of interest. You can ask others that have an understanding of this system."
  },
  {
    "objectID": "implementation_info.html#table-polishing-and-visual-alternatives",
    "href": "implementation_info.html#table-polishing-and-visual-alternatives",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.8 Table Polishing and Visual Alternatives",
    "text": "3.8 Table Polishing and Visual Alternatives\nTables with aggregated statistics are really useful. They form the backbone of any analysis and monitoring of demographic statistcs. However, they are sometimes hard to read or it can be hard to highlight the key trends or insights from the data.\nOnce the tables are produced there is the potential to use more visual ways of displaying the data, such as the generation of choropleth maps to display geospatial statistics."
  },
  {
    "objectID": "implementation_info.html#crvs-tables-quality-assurance",
    "href": "implementation_info.html#crvs-tables-quality-assurance",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.9 CRVS Tables Quality Assurance",
    "text": "3.9 CRVS Tables Quality Assurance\nOnce the tables are produced: do they show what you would expect? Are there any obvious issues with the data being shown? Do the numbers produced at the aggregate level match other surveys/estimates?"
  },
  {
    "objectID": "implementation_info.html#putting-the-tables-into-context",
    "href": "implementation_info.html#putting-the-tables-into-context",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.10 Putting the Tables into Context",
    "text": "3.10 Putting the Tables into Context\nNot everyone is a CRVS expert and may not be fully aware of what the tables or graphs show. In order to give a fuller picture, statisticians and analysts should take the time to add accompanying text to the tables. This accompanying text will be a useful tool to “tell the story” and can help in increasing awareness across government and media."
  },
  {
    "objectID": "implementation_info.html#achieving-a-crvs-report",
    "href": "implementation_info.html#achieving-a-crvs-report",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.11 Achieving a CRVS report",
    "text": "3.11 Achieving a CRVS report\nOnce these tables and accompanying text has been validated, a report can be put together with the information. However some issues still need to be addressed: Who is going to be responsible to publish? Is the publication in a physical form needed or can it be .pdf online? What are the timescales involved in getting the publication ready? Does the publication date co-incide with other key publications? Is there some time set asside to the disseminate the results?"
  },
  {
    "objectID": "implementation_info.html#its-not-only-about-the-report",
    "href": "implementation_info.html#its-not-only-about-the-report",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.12 It’s not Only About the Report",
    "text": "3.12 It’s not Only About the Report\nThere are several levels of data, some may not make it into the report, but may still be useful across government. Are there data users that could access more granular or more timely data?"
  },
  {
    "objectID": "implementation_info.html#learning-lessons",
    "href": "implementation_info.html#learning-lessons",
    "title": "3  Implementing an R Vital Statistics pipeline",
    "section": "3.13 Learning Lessons",
    "text": "3.13 Learning Lessons\nNo process is ever perfect, the key will be on how feedback loops are set so that every part of it get better the more they do it. Writing documents on how things work is useful to ensure a common understanding. Documenting existing issues and sharing these up and downstream will help them make things better next time around. Holding semi-regular stakeholder meetings throughout the year is a good place to share insights and emerging issues."
  },
  {
    "objectID": "practical_delivery.html#before-we-begin",
    "href": "practical_delivery.html#before-we-begin",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.1 Before we Begin",
    "text": "4.1 Before we Begin"
  },
  {
    "objectID": "practical_delivery.html#who-should-participate",
    "href": "practical_delivery.html#who-should-participate",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.2 Who Should Participate?",
    "text": "4.2 Who Should Participate?"
  },
  {
    "objectID": "practical_delivery.html#what-should-the-agenda-look-like",
    "href": "practical_delivery.html#what-should-the-agenda-look-like",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.3 What Should the Agenda Look like?",
    "text": "4.3 What Should the Agenda Look like?"
  },
  {
    "objectID": "practical_delivery.html#requirements-before-starting",
    "href": "practical_delivery.html#requirements-before-starting",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.4 Requirements Before Starting",
    "text": "4.4 Requirements Before Starting\n\n4.4.1 Requirements for the NSO/NROs\n\n\n4.4.2 Requirements for the Delivery Team"
  },
  {
    "objectID": "practical_delivery.html#what-are-the-goals",
    "href": "practical_delivery.html#what-are-the-goals",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.5 What are the Goals?",
    "text": "4.5 What are the Goals?"
  },
  {
    "objectID": "practical_delivery.html#day-1",
    "href": "practical_delivery.html#day-1",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.6 Day 1",
    "text": "4.6 Day 1"
  },
  {
    "objectID": "practical_delivery.html#day-2",
    "href": "practical_delivery.html#day-2",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.7 Day 2",
    "text": "4.7 Day 2"
  },
  {
    "objectID": "practical_delivery.html#day-3",
    "href": "practical_delivery.html#day-3",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.8 Day 3",
    "text": "4.8 Day 3"
  },
  {
    "objectID": "practical_delivery.html#day-4",
    "href": "practical_delivery.html#day-4",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.9 Day 4",
    "text": "4.9 Day 4"
  },
  {
    "objectID": "practical_delivery.html#day-5",
    "href": "practical_delivery.html#day-5",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.10 Day 5",
    "text": "4.10 Day 5"
  },
  {
    "objectID": "practical_delivery.html#how-did-it-go",
    "href": "practical_delivery.html#how-did-it-go",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.11 How did it Go?",
    "text": "4.11 How did it Go?"
  },
  {
    "objectID": "practical_delivery.html#what-next",
    "href": "practical_delivery.html#what-next",
    "title": "4  Practical Delivery of CRVS table Generation",
    "section": "4.12 What Next?",
    "text": "4.12 What Next?"
  },
  {
    "objectID": "data_cleaning.html#practice-dataset",
    "href": "data_cleaning.html#practice-dataset",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.1 Practice dataset",
    "text": "5.1 Practice dataset\nWe will use a synthetic dataset (Table 5.1) that has the appearance of civil registration data to practice with. The states of Nigeria are used but otherwise the data are completely fictional.\n\n\n\n\nTable 5.1: Synthetic dataset, first 5 rows\n\n\n\n\n\n\n\n\n\n\n\n\nid\nbirth1a\nbirth1b\nbirth1c\nbirth1g\nbirth1h\nbirth1i\nbirth2a\nbirth3b\n\n\n\n308\n2024-08-05\n2024-08-28\nNassarawa\nTwin\nMidwife\nHospital\nF\n70\n\n\n816\n2024-07-02\n2024-07-14\nJigawa\nTriplet\nOther\nUnknown\nM\n55\n\n\n832\n2024-07-14\n2024-07-23\nSokoto\nQuadruplet or higher\nOther\nClinic\nF\n20\n\n\n81\n2024-06-01\n2024-06-06\nAbia\nTriplet\nDoctor\nClinic\nM\n31\n\n\n739\n2024-06-12\n2024-07-06\nOyo\nSingle\nMidwife\nUnknown\nM\n73"
  },
  {
    "objectID": "data_cleaning.html#setup",
    "href": "data_cleaning.html#setup",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.2 Setup",
    "text": "5.2 Setup\nBefore we start we need to load the tidyverse package. This will make available a range of handy functions for data manipulation.\n\nlibrary(tidyverse)\n\nThen we need to load our dataset using the read_csv() function. All you need to do is provide a path to your CSV file.\n\ndf &lt;- read_csv(\"data/practice_data.csv\")\n\n\n\n\n\n\n\nParsing data types\n\n\n\nVariables are parsed automatically with the read_csv() function but you can set data types for specific columns manually. For example,\n\ndf &lt;- read_csv(\n  \"data/practice_data.csv\",\n  col_types = cols(\n    x = col_character(),\n    y = col_logical()\n  )\n)\n\n\n\nThen we can inspect our dataset.\n\nglimpse(df)\n\nRows: 1,004\nColumns: 9\n$ id      &lt;int&gt; 308, 816, 832, 81, 739, 973, 83, 479, 433, 587, 325, 293, 66, …\n$ birth1a &lt;chr&gt; \"2024-08-05\", \"2024-07-02\", \"2024-07-14\", \"2024-06-01\", \"2024-…\n$ birth1b &lt;date&gt; 2024-08-28, 2024-07-14, 2024-07-23, 2024-06-06, 2024-07-06, 2…\n$ birth1c &lt;chr&gt; \"Nassarawa\", \"Jigawa\", \"Sokoto\", \"Abia\", \"Oyo\", \"Enugu\", \"Kogi…\n$ birth1g &lt;chr&gt; \"Twin\", \"Triplet\", \"Quadruplet or higher\", \"Triplet\", \"Single\"…\n$ birth1h &lt;chr&gt; \"Midwife\", \"Other\", \"Other\", \"Doctor\", \"Midwife\", \"Nurse\", \"Nu…\n$ birth1i &lt;chr&gt; \"Hospital\", \"Unknown\", \"Clinic\", \"Clinic\", \"Unknown\", \"Unknown…\n$ birth2a &lt;chr&gt; \"F\", \"M\", \"F\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"F\", \"F…\n$ birth3b &lt;int&gt; 70, 55, 20, 31, 73, 53, 53, 31, 3, 25, 67, 0, 31, 33, 24, 42, …\n\n\nThere are 9 variables in our data:\n\nid\n\nbirth1a (Date of occurrence, Event)\n\nbirth1b (Date of registration, Event)\n\nbirth1c (Place of occurrence, Event)\n\nbirth1g (Type of birth, Event)\n\nbith1h (Attendant at birth, Event)\n\nbirth1i (Type of place of occurrence, Event)\n\nbirth2a (Sex, Newborn)\n\nbirth3b (Age, Mother)\n\nThe variable birth1b (Date of registration, Event) is of type date, id and birth3b (Age, Mother) integer, and the others are all character."
  },
  {
    "objectID": "data_cleaning.html#data-de-identification",
    "href": "data_cleaning.html#data-de-identification",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.3 Data de-identification",
    "text": "5.3 Data de-identification\nInformation that could identify individuals must be removed from the datatset.\n\n5.3.1 Removing columns\nSometimes personal information can be left in a dataset. We can easily drop identifying variables with select(). For example, if the id variable were actually a national identity number you could remove it with:\n\ndf |&gt; \n  select(-id)"
  },
  {
    "objectID": "data_cleaning.html#valid",
    "href": "data_cleaning.html#valid",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.4 Valid",
    "text": "5.4 Valid\nVariables should conform to data types and values should fall within expected ranges.\n\n5.4.1 Characters as dates\nDates can be inputted in a variety of formats such as “1 August 24”, Aug 1, 2024”, and “2024-08-01”. Sometimes R will not be able to parse a date and will read it as a character.\nThe variable birth1a (Date of occurrence, Event) is a character but it should be a date. We can coerce it to a date by passing it to the as.Date() function and choosing the corresponding date format. birth1a follows the ISO 8601 standard for dates or ‘YYYY-MM-DD’ so we need to format the data with “%Y-%m-%d”.\n\ndf &lt;- mutate(df, birth1a = as.Date(birth1a, format = \"%Y-%m-%d\"))\nclass(df$birth1a)\n\n[1] \"Date\"\n\n\n\n\n\n\nTable 5.2: Date formats in R\n\nSymbol\nDescription\nExample\n\n\n\n%d\nDay as a number\n01-31\n\n\n%a\nAbbreviated weekday\nWed\n\n\n%A\nUnabbreviated weekday\nWednesday\n\n\n%m\nMonth as a number\n1-12\n\n\n%b\nAbbreviated month\nFeb\n\n\n%B\nUnabbreviated month\nFebruary\n\n\n%y\n2-digit year\n24\n\n\n%Y\n4-digit year\n2024\n\n\n\n\n\n\nYou can also use the ymd() function which more intuitively transforms the date into year, month, and day.\n\nmutate(df, birth1a = ymd(birth1a))\n\nWe can see that some registration dates have been entered as “1900-01-01”.\n\n5.4.2 Characters as factors\nIt is common practice to read known values of a variable as characters, hence stringsAsFactors = FALSE. However, once you have read in the data you may wish to convert a character variable into a factor. Here we are converting birth1g (Type of birth, Event) into a factor.\n\nclass(df$birth1g)\n\n[1] \"character\"\n\ndf$birth1g &lt;- as_factor(df$birth1g)\nclass(df$birth1g)\n\n[1] \"factor\"\n\n\n\n5.4.3 Remove white space\nLeading and trailing white space can easily be coded in error with manual data entry. We can get rid of these blank characters with the str_squish() function from the stringr package.\n\nstr_squish(\" Federal    Capital Territory\")\n\n[1] \"Federal Capital Territory\"\n\n\n\n5.4.4 Values within expected range\nSometimes there can be rogue values in a dataset that have been entered in error. We can check for these by calculating some summary statistics. The skim() function from the skimr package prints the average, quartiles and a neat histogram.\n\nlibrary(skimr)\nskim(df, \"birth3b\")\n\n\n\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate mean   sd p0 p25 p50 p75 p100 hist \n1 birth3b              10         0.990 43.7 26.9  0  19  44  67   90 ▇▆▆▆▆\n\n\n\n5.4.5 Wrong order of levels\nSometimes the order of levels in a factor variable is not very helpful. The fct_relevel() function allows you to customise the order of levels. Here we reorder the values of birth1g (Type of birth, Event) so that “Single” comes first, then “Twin” etc.\n\ndf$birth1g |&gt; levels()\n\n[1] \"Twin\"                 \"Triplet\"              \"Quadruplet or higher\"\n[4] \"Single\"              \n\ndf$birth1g |&gt; fct_relevel(\"Single\", \"Twin\", \"Triplet\", \"Quadruplet or higher\") |&gt; levels()\n\n[1] \"Single\"               \"Twin\"                 \"Triplet\"             \n[4] \"Quadruplet or higher\"\n\n\n\n5.4.6 Recode values\nOften values of a variable are coded unhelpfully. For example, in birth2a (Sex, Newborn) the sex of the newborn baby has been recorded as “M” and “F”. We can easily recode these so that they are more readable. The fct_recode() function enables you to change factor levels by hand.\n\ndf$birth2a |&gt; \n  fct_recode(Female = \"F\", Male = \"M\") |&gt; \n  levels()\n\n[1] \"Female\" \"Male\"  \n\n\nYou can also use the case_match() function within mutate().\n\ndf |&gt;\n  mutate(birth2a = case_match(birth2a, \"F\" ~ \"Female\", \"M\" ~ \"Male\"))"
  },
  {
    "objectID": "data_cleaning.html#accurate",
    "href": "data_cleaning.html#accurate",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.5 Accurate",
    "text": "5.5 Accurate\nThere should be no conflicting information in the dataset.\n\n5.5.1 Dates out of sequence\nThere may be inputting errors in the civil registration data such as birth1a (Date of occurrence, Event) being recorded after birth1b (Date of registration, Event). To identify those records that are out of sync we can use a simple filter. The code below selects all of the rows where birth1a (Date of occurrence, Event) is after birth1b (Date of registration, Event) and prints out selected columns.\n\nfilter(df, birth1a &gt; birth1b) |&gt; \n  select(id, birth1a, birth1b)\n\n   id    birth1a    birth1b\n1 488 2024-05-01 1900-01-01\n2 106 2024-07-22 1900-01-01\n3 230 2024-06-05 1900-01-01"
  },
  {
    "objectID": "data_cleaning.html#complete",
    "href": "data_cleaning.html#complete",
    "title": "\n5  Data cleaning\n",
    "section": "\n5.6 Complete",
    "text": "5.6 Complete\nThere should be no missing or duplicate cases in the dataset.\n\n5.6.1 Identifying duplicate rows\nWe can identify duplicate rows by using the get_dupes() function from the janitor package. The function will return any duplicate records and add a dupe_count column containing the number of duplicates. You just need to supply a unique identifier e.g. `id`` or a unique combination of columns.\n\ndf |&gt; \n  get_dupes(id)\n\n   id dupe_count    birth1a    birth1b   birth1c birth1g birth1h  birth1i\n1 308          5 2024-08-05 2024-08-28 Nassarawa    Twin Midwife Hospital\n2 308          5 2024-08-05 2024-08-28 Nassarawa    Twin Midwife Hospital\n3 308          5 2024-08-05 2024-08-28 Nassarawa    Twin Midwife Hospital\n4 308          5 2024-08-05 2024-08-28 Nassarawa    Twin Midwife Hospital\n5 308          5 2024-08-05 2024-08-28 Nassarawa    Twin Midwife Hospital\n  birth2a birth3b\n1       F      70\n2       F      70\n3       F      70\n4       F      70\n5       F      70\n\n\n\n5.6.2 Removing duplicates\nTo drop duplicate rows whilst retaining the first row we can use the distinct() function. Remember to pass the argument .keep_all = TRUE to keep all the variables not just the unique identifier.\n\ndf |&gt;\n  distinct(id, .keep_all = TRUE)\n\n\n5.6.3 Convert values to NA\nMissing values are recorded in a variety of ways e.g. 999999, NULL, or even ” “. We can recode these missing values to a more explicit NA using the na_if() function. The variable birth1c (Place of occurrence, Event) includes a number of missing values that have been recorded as” “. We can replace these with NA using the code below.\n\ndf &lt;- mutate(df, birth1c = na_if(birth1c, \"\"))\n\nYou can also use the case_match() function as an alternative.\n\ndf &lt;- mutate(df, birth1c = case_match(birth1c, NA ~ \"\", .default = birth1c))\n\n\n5.6.4 Checking missing data\nTo identify how many missing values there are in the whole dataset we can run:\n\ndf |&gt; map_dbl(~sum(is.na(.)))\n\n     id birth1a birth1b birth1c birth1g birth1h birth1i birth2a birth3b \n      0       0       0       0       0       0       0       0      10 \n\n\nThere are 0 NA values in birth1c (Place of occurrence, Event) and 10 in birth3b (Age, Mother).\n\n5.6.5 Fill missing value with previous value\nSometimes values are not explicit in a dataset. For example, you might have some population data and only the first value explicitly records the sex.\n\nkable(pop)\n\n\n\nAge\nSex\nPopulation\n\n\n\n0-4\nMale\n9432700\n\n\n5-9\nNA\n7875387\n\n\n10-14\nNA\n7088327\n\n\n15-19\nNA\n6159773\n\n\n20-24\nNA\n5139436\n\n\n25-29\nNA\n4238963\n\n\n30-34\nNA\n3443384\n\n\n35-39\nNA\n2756472\n\n\n\n\n\nWe can solve this problem with the fill() function which takes the previous value and uses it to fill subsequent missing values.\n\npop |&gt; fill(Sex)\n\n\n\n\n\nAge\nSex\nPopulation\n\n\n\n0-4\nMale\n9432700\n\n\n5-9\nMale\n7875387\n\n\n10-14\nMale\n7088327\n\n\n15-19\nMale\n6159773\n\n\n20-24\nMale\n5139436\n\n\n25-29\nMale\n4238963\n\n\n30-34\nMale\n3443384\n\n\n35-39\nMale\n2756472\n\n\n\n\n\n\n5.6.6 Imputing missing data\nIn cases where there are missing values in an integer variable we can impute them as an average. For example, there are 10 missing values in birth3b (Age, Mother). We can impute the mean age with the following code.\n\ndf &lt;- df |&gt; \n  mutate(birth3b = case_when(\n    is.na(birth3b) ~ as.integer(mean(birth3b, na.rm = TRUE)),\n    TRUE ~ birth3b)\n    )"
  },
  {
    "objectID": "styling_tables.html#gt-tables",
    "href": "styling_tables.html#gt-tables",
    "title": "\n6  Styling tables\n",
    "section": "\n6.1 gt tables",
    "text": "6.1 gt tables\nBefore formatting and styling the table it is a good idea to understand the structure and syntax of a gt table. This is important because the functions in the gt package are named so that they relate to the parts of the table.\n\n\nThe Parts of a gt Table\n\n\n\nTable header: title and subtitle\n\nStub and Stub Head: area to left of table containing row labels. The stubhead contains the label that describes the rows.\n\nColumn labels: column labels\n\nSpanner column labels: labels for grouped columns\n\nTable body: columns and rows\n\nTable footer: text at the bottom of the table containing optional footnotes and source notes"
  },
  {
    "objectID": "styling_tables.html#summary-data",
    "href": "styling_tables.html#summary-data",
    "title": "\n6  Styling tables\n",
    "section": "\n6.2 Summary data",
    "text": "6.2 Summary data\nWe have some summary data for Table 3.11 (Redistribution of births with incomplete data on ‘age of mother’, year) from the Vital Strategies report template.\n\n#&gt; # A tibble: 11 × 4\n#&gt;    fert_age_grp total proportion adjusted_total\n#&gt;    &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;\n#&gt;  1 &lt;15              2      0                  2\n#&gt;  2 15-19          239      0.048            250\n#&gt;  3 19-24         1088      0.218           1140\n#&gt;  4 25-20         1596      0.319           1673\n#&gt;  5 30-34         1298      0.26            1360\n#&gt;  6 35-39          640      0.128            671\n#&gt;  7 40-44          124      0.025            130\n#&gt;  8 45-49           12      0.002             13\n#&gt;  9 50+              1      0                  0\n#&gt; 10 Unknown        240     NA                  0\n#&gt; 11 Total         5240      1               5240"
  },
  {
    "objectID": "styling_tables.html#simple-table",
    "href": "styling_tables.html#simple-table",
    "title": "\n6  Styling tables\n",
    "section": "\n6.3 Simple table",
    "text": "6.3 Simple table\nThe default gt table can be created using the gt() function. It is a simple table with 4 columns.\n\ndf |&gt; gt()\n\n\n\n\n\n\nfert_age_grp\n      total\n      proportion\n      adjusted_total\n    \n\n\n&lt;15\n2\n0.000\n2\n\n\n15-19\n239\n0.048\n250\n\n\n19-24\n1088\n0.218\n1140\n\n\n25-20\n1596\n0.319\n1673\n\n\n30-34\n1298\n0.260\n1360\n\n\n35-39\n640\n0.128\n671\n\n\n40-44\n124\n0.025\n130\n\n\n45-49\n12\n0.002\n13\n\n\n50+\n1\n0.000\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5240\n1.000\n5240"
  },
  {
    "objectID": "styling_tables.html#rows",
    "href": "styling_tables.html#rows",
    "title": "\n6  Styling tables\n",
    "section": "\n6.4 Rows",
    "text": "6.4 Rows\nStubs are table row labels. You can specify a stub column using the gt() function and the rowname_col argument. We have supplied ‘fert_age_grp’ as the stub column because fertility age group is the grouping variable. Normally the stubhead will remain unlabelled so we supply label text to tab_stubhead().\nNB Not all tables need row labels so you can skip this step if unnecessary.\nWe can also make additional styling improvements by re-positioning the stubhead label, formatting it as bold and setting the stub width.\n\ntbl &lt;- df |&gt; \n  # create a column of row names\n  gt(rowname_col = \"fert_age_grp\") |&gt; \n  # add a stubhead label\n  tab_stubhead(label = \"Mothers' age group (years)\") |&gt; \n  # style stubhead label\n  tab_style(\n    style = cell_text(v_align  = \"top\", weight = \"bold\"),\n    locations = cells_stubhead()\n  ) |&gt;\n  # set stub width\n  cols_width(fert_age_grp ~ px(100))\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      total\n      proportion\n      adjusted_total\n    \n\n\n&lt;15\n2\n0.000\n2\n\n\n15-19\n239\n0.048\n250\n\n\n19-24\n1088\n0.218\n1140\n\n\n25-20\n1596\n0.319\n1673\n\n\n30-34\n1298\n0.260\n1360\n\n\n35-39\n640\n0.128\n671\n\n\n40-44\n124\n0.025\n130\n\n\n45-49\n12\n0.002\n13\n\n\n50+\n1\n0.000\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5240\n1.000\n5240\n\n\n\n\n\n\nThe table now only contains 3 columns because we assigned ‘fert_age_grp’ to the stub.\nIf you wanted to combine particular rows you can use the tab_row_group() function. Suppose we wanted to create a ‘40+’ group we would just supply a vector of the relevant age groups to the rows argument of tab_row_group().\n\ntbl |&gt; \n  tab_row_group(\n    label = \"40+\",\n    rows = c(\"40-44\", \"45-49\", \"50+\")\n  ) |&gt; \n  tab_row_group(\n    label = \"Under 40\",\n    rows = 1:6\n  ) |&gt; \n  tab_style(\n    style = cell_text(weight = \"bold\", style = \"italic\"),\n    locations = cells_row_groups()\n    )\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      total\n      proportion\n      adjusted_total\n    \n\n\nUnder 40\n    \n\n&lt;15\n2\n0.000\n2\n\n\n15-19\n239\n0.048\n250\n\n\n19-24\n1088\n0.218\n1140\n\n\n25-20\n1596\n0.319\n1673\n\n\n30-34\n1298\n0.260\n1360\n\n\n35-39\n640\n0.128\n671\n\n\n40+\n    \n\n40-44\n124\n0.025\n130\n\n\n45-49\n12\n0.002\n13\n\n\n50+\n1\n0.000\n0\n\n\n\n    \n\nUnknown\n240\nNA\n0\n\n\nTotal\n5240\n1.000\n5240"
  },
  {
    "objectID": "styling_tables.html#label-columns",
    "href": "styling_tables.html#label-columns",
    "title": "\n6  Styling tables\n",
    "section": "\n6.5 Label columns",
    "text": "6.5 Label columns\nTo customise the column labels we can use the cols_label() function.\n\ntbl &lt;- tbl |&gt; \n  cols_label(\n    total = \"Number of births\",\n    proportion = \"Proportion (%)\",\n    adjusted_total = \"Number of births\"\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      Number of births\n      Proportion (%)\n      Number of births\n    \n\n\n&lt;15\n2\n0.000\n2\n\n\n15-19\n239\n0.048\n250\n\n\n19-24\n1088\n0.218\n1140\n\n\n25-20\n1596\n0.319\n1673\n\n\n30-34\n1298\n0.260\n1360\n\n\n35-39\n640\n0.128\n671\n\n\n40-44\n124\n0.025\n130\n\n\n45-49\n12\n0.002\n13\n\n\n50+\n1\n0.000\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5240\n1.000\n5240"
  },
  {
    "objectID": "styling_tables.html#style-column-labels",
    "href": "styling_tables.html#style-column-labels",
    "title": "\n6  Styling tables\n",
    "section": "\n6.6 Style column labels",
    "text": "6.6 Style column labels\nThe generic tab_style() function can be used to target the column labels and apply styling. Here we use the cells_column_labels() location helper function to left-align and format the column labels as bold.\n\ntbl &lt;- tbl |&gt; \n  tab_style(\n    style = cell_text(align  = \"right\", weight = \"bold\"),\n    locations = cells_column_labels()\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      Number of births\n      Proportion (%)\n      Number of births\n    \n\n\n&lt;15\n2\n0.000\n2\n\n\n15-19\n239\n0.048\n250\n\n\n19-24\n1088\n0.218\n1140\n\n\n25-20\n1596\n0.319\n1673\n\n\n30-34\n1298\n0.260\n1360\n\n\n35-39\n640\n0.128\n671\n\n\n40-44\n124\n0.025\n130\n\n\n45-49\n12\n0.002\n13\n\n\n50+\n1\n0.000\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5240\n1.000\n5240"
  },
  {
    "objectID": "styling_tables.html#format-columns",
    "href": "styling_tables.html#format-columns",
    "title": "\n6  Styling tables\n",
    "section": "\n6.7 Format columns",
    "text": "6.7 Format columns\nThere are a variety of functions that format column values. Here we use fmt_number() to specify whole numbers with thousands separators for the ‘total’ and ‘adjusted_total’ columns. The function fmt_percent() converts values of ‘proportion’ into a percentage with one decimal place.\n\ntbl &lt;- tbl |&gt; \n  fmt_number(columns = c(\"total\", \"adjusted_total\"), decimals = 0) |&gt;\n  fmt_percent(columns = \"proportion\", decimals = 1)\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      Number of births\n      Proportion (%)\n      Number of births\n    \n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240"
  },
  {
    "objectID": "styling_tables.html#spanner-column-labels",
    "href": "styling_tables.html#spanner-column-labels",
    "title": "\n6  Styling tables\n",
    "section": "\n6.8 Spanner column labels",
    "text": "6.8 Spanner column labels\nGrouping together columns can be done with the tab_spanner() function. The columns argument is used to specify which columns to span.\nWe can style the spanner column labels using tab_style() and the cells_column_spanners() location helper function.\n\ntbl &lt;- tbl |&gt; \n  tab_spanner(\n    label = \"Unadjusted\",\n    columns = c(total, proportion)\n  ) |&gt;\n  tab_spanner(\n    label = \"Adjusted\",\n    columns = adjusted_total\n  ) |&gt; \n  # style spanner column labels\n  tab_style(\n    style = cell_text(align  = \"right\", weight = \"bold\"),\n    locations = cells_column_spanners()\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240"
  },
  {
    "objectID": "styling_tables.html#headers",
    "href": "styling_tables.html#headers",
    "title": "\n6  Styling tables\n",
    "section": "\n6.9 Headers",
    "text": "6.9 Headers\nAdd a title and subtitle to the table using the tab_header() function. You can style the headings with either markdown (md()) or HTML (html()). Here we have used markdown to format the title in bold.\nThe table headings are centred by default but you can change the alignment to either “left” or “right” using the opt_align_table_header() function.\n\ntbl &lt;- tbl |&gt; \n  tab_header(\n    # style title using markdown\n    title = md(\"**Table 3.11**\"),\n    subtitle = \"Redistribution of live births with incomplete data on ‘age of mother’, year\"\n  ) |&gt;\n  # align left\n  opt_align_table_header(align = \"left\")\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240"
  },
  {
    "objectID": "styling_tables.html#source-notes",
    "href": "styling_tables.html#source-notes",
    "title": "\n6  Styling tables\n",
    "section": "\n6.10 Source notes",
    "text": "6.10 Source notes\nThe function tab_source_note() allows you to add source information to a table. It is possible to style the text with either Markdown (md()) or HTML (html()).\n\ntbl &lt;- tbl |&gt; \n  tab_source_note(\n    source_note = md(\"*Source*: CRVS system\")\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system"
  },
  {
    "objectID": "styling_tables.html#footnotes",
    "href": "styling_tables.html#footnotes",
    "title": "\n6  Styling tables\n",
    "section": "\n6.11 Footnotes",
    "text": "6.11 Footnotes\nFootnotes are added to gt tables using the tab_footnote() function. It consists of two main arguments. You provide the text of the footnote using footnote and target the corresponding cells using location. The footnote text can be styled using md() or html() and cells can be targeted using a location helper function. For example, we have supplied the cells_column_spanners() location helper function to tab_footnote() to target a particular spanner column label: ‘Adjusted’.\n\ntbl &lt;- tbl |&gt; \n  tab_footnote(\n    footnote = \"Births were adjusted for missing values on age of mother\",\n    locations = cells_column_spanners(spanners = \"Adjusted\")\n  ) |&gt; \n  opt_footnote_marks(marks = \"standard\")\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted*\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system\n\n    \n\n\n* Births were adjusted for missing values on age of mother\n    \n\n\n\n\nYou can also customise the set of footnote marks using the opt_footnote_marks() function. Here we have use the ‘standard’ set which is an asterisk, dagger, double dagger etc. You can alternatively opt for ‘numbers’, ‘letters’ or even supply your own vector of symbols using c()."
  },
  {
    "objectID": "styling_tables.html#cell-styling",
    "href": "styling_tables.html#cell-styling",
    "title": "\n6  Styling tables\n",
    "section": "\n6.12 Cell styling",
    "text": "6.12 Cell styling\nWe can use the general purpose tab_style() function with location helper functions to style any part of the table. Here we will format the ‘Total’ cells_stub() row label in bold.\n\ntbl &lt;- tbl |&gt; \n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_stub(rows = \"Total\")\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted*\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system\n\n    \n\n\n* Births were adjusted for missing values on age of mother\n    \n\n\n\n\nIf we wanted to draw attention to a specific value we could also highlight it with a colour fill. Here we locate the target cell by passing the column name and row number to the cells_body() location helper function in tab_style().\n\ntbl |&gt; \n  tab_style(\n    style = cell_fill(color = \"tomato\", alpha = 0.5),\n    locations = cells_body(columns = total, rows = 4)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted*\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system\n\n    \n\n\n* Births were adjusted for missing values on age of mother\n    \n\n\n\n\nHighlighting the whole row would require identifying the relevant row.\n\ntbl |&gt; \n  tab_style(\n    style = cell_fill(color = \"tomato\", alpha = 0.5),\n    locations = cells_body(rows = fert_age_grp == \"25-20\")\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted*\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system\n\n    \n\n\n* Births were adjusted for missing values on age of mother"
  },
  {
    "objectID": "styling_tables.html#table-styling",
    "href": "styling_tables.html#table-styling",
    "title": "\n6  Styling tables\n",
    "section": "\n6.13 Table styling",
    "text": "6.13 Table styling\nWe can style the whole table in a number of ways. For example, we can use the opt_table_font() function to specify a specific typeface.\nThe tab_options() function has nearly 200 different styling options for the whole table. We have picked a few below to match the table style in the Vital Strategies report template\n\ntbl &lt;- tbl |&gt; \n  opt_table_font(font = google_font(\"Montserrat\")) |&gt;\n  tab_options(\n    # change size of text\n    heading.title.font.size = px(22),\n    heading.subtitle.font.size = px(18),\n    column_labels.font.size = px(15),\n    table.font.size = px(14),\n    # adjust table width\n    table.width = px(600),\n    # reduce the height of rows\n    data_row.padding = px(3),\n    # modify the table's background colour\n    table.background.color = \"#EFF3F7\",\n    # style borders\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    heading.border.bottom.color = \"transparent\",\n    column_labels.border.bottom.color = \"#AFC3D8\",\n    table_body.border.bottom.color = \"#AFC3D8\",\n    table_body.hlines.color = \"#AFC3D8\"\n  )\n\n# show the table\ntbl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3.11\n\n    \n\nRedistribution of live births with incomplete data on ‘age of mother’, year\n    \n\nMothers' age group (years)\n      \n        Unadjusted\n      \n      \n        Adjusted*\n      \n    \n\nNumber of births\n      Proportion (%)\n      Number of births\n    \n\n\n\n&lt;15\n2\n0.0%\n2\n\n\n15-19\n239\n4.8%\n250\n\n\n19-24\n1,088\n21.8%\n1,140\n\n\n25-20\n1,596\n31.9%\n1,673\n\n\n30-34\n1,298\n26.0%\n1,360\n\n\n35-39\n640\n12.8%\n671\n\n\n40-44\n124\n2.5%\n130\n\n\n45-49\n12\n0.2%\n13\n\n\n50+\n1\n0.0%\n0\n\n\nUnknown\n240\nNA\n0\n\n\nTotal\n5,240\n100.0%\n5,240\n\n\n\n\nSource: CRVS system\n\n    \n\n\n* Births were adjusted for missing values on age of mother"
  },
  {
    "objectID": "styling_tables.html#create-a-theme",
    "href": "styling_tables.html#create-a-theme",
    "title": "\n6  Styling tables\n",
    "section": "\n6.14 Create a theme",
    "text": "6.14 Create a theme\nA theme is a function that applies consistent table styling options to any table.\n\ntheme_vs &lt;- function(tbl) {\n  tbl |&gt; \n    opt_table_font(font = google_font(\"Montserrat\")) |&gt;\n    tab_options(\n      heading.title.font.size = px(22),\n      heading.subtitle.font.size = px(18),\n      column_labels.font.size = px(15),\n      table.font.size = px(14),\n      table.width = px(600),\n      data_row.padding = px(3),\n      table.background.color = \"#EFF3F7\",\n      table.border.top.color = \"transparent\",\n      table.border.bottom.color = \"transparent\",\n      heading.border.bottom.color = \"transparent\",\n      column_labels.border.bottom.color = \"#AFC3D8\",\n      table_body.border.bottom.color = \"#AFC3D8\",\n      table_body.hlines.color = \"#AFC3D8\"\n      )\n}\n\nThis can then be applied as:\n\ntbl |&gt; \n  theme_vs()"
  },
  {
    "objectID": "styling_tables.html#full-code",
    "href": "styling_tables.html#full-code",
    "title": "\n6  Styling tables\n",
    "section": "\n6.15 Full code",
    "text": "6.15 Full code\nWe can combine all the different parts of the code together.\n\ntbl &lt;- df |&gt; \n  # Rows\n  gt(rowname_col = \"fert_age_grp\") |&gt; \n  tab_stubhead(label = \"Mothers' age group (years)\") |&gt; \n  tab_style(\n    style = cell_text(v_align  = \"top\", weight = \"bold\"),\n    locations = cells_stubhead()\n  ) |&gt;\n  cols_width(fert_age_grp ~ px(100)) |&gt; \n  # Label columns\n  cols_label(\n    total = \"Number of births\",\n    proportion = \"Proportion (%)\",\n    adjusted_total = \"Number of births\"\n  ) |&gt; \n  # Style column labels\n  tab_style(\n    style = cell_text(align  = \"right\", weight = \"bold\"),\n    locations = cells_column_labels()\n  ) |&gt; \n  # Format columns\n  fmt_number(columns = c(\"total\", \"adjusted_total\"), decimals = 0) |&gt;\n  fmt_percent(columns = \"proportion\", decimals = 1) |&gt; \n  # Spanner column labels\n  tab_spanner(\n    label = \"Unadjusted\",\n    columns = c(total, proportion)\n  ) |&gt;\n  tab_spanner(\n    label = \"Adjusted\",\n    columns = adjusted_total\n  ) |&gt; \n  tab_style(\n    style = cell_text(align  = \"right\", weight = \"bold\"),\n    locations = cells_column_spanners()\n  ) |&gt; \n  # Headers\n  tab_header(\n    title = md(\"**Table 3.11**\"),\n    subtitle = \"Redistribution of live births with incomplete data on ‘age of mother’, year\"\n  ) |&gt;\n  opt_align_table_header(align = \"left\") |&gt; \n  # Source notes\n  tab_source_note(\n    source_note = md(\"*Source*: CRVS system\")\n  ) |&gt; \n  # Footnotes\n  tab_footnote(\n    footnote = \"Births were adjusted for missing values on age of mother\",\n    locations = cells_column_spanners(spanners = \"Adjusted\")\n  ) |&gt; \n  opt_footnote_marks(marks = \"standard\") |&gt; \n  # Cell styling\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_stub(rows = \"Total\")\n  ) |&gt; \n  # Table styling\n  vs_theme()"
  },
  {
    "objectID": "styling_tables.html#saving-tables",
    "href": "styling_tables.html#saving-tables",
    "title": "\n6  Styling tables\n",
    "section": "\n6.16 Saving tables",
    "text": "6.16 Saving tables\nOnce we are happy with our table we can export it. gt provide a number of different output options including Word and PDF.\n\n# to a PNG\ntbl |&gt; gtsave(\"gt_table_3_11.png\", expand = 10)\n\n# to a Word doc\ntbl |&gt; gtsave(\"gt_table_3_11.docx\")\n\n# to a PDF\ntbl |&gt; gtsave(\"gt_table_3_11.pdf\")\n\nNB if you want to export an editable table (rather than an image) to a Word document then run gtsave(\"gt_table_3_11.rtf\")."
  },
  {
    "objectID": "charts.html#introduction",
    "href": "charts.html#introduction",
    "title": "\n7  Charts\n",
    "section": "\n7.1 Introduction",
    "text": "7.1 Introduction\nThe ggplot2 R package (Wickham 2016) is one of the most popular tools for creating static publication-ready graphics. In this chapter we will run through the process of building a chart in ggplot2 using aggregated civil registration data. We will recreate Figure 7.1 that was published in Rwanda’s 2023 Vital Statistics Report.\n\n\nFigure 7.1: Birth and death registration completeness rates in Rwanda, 2019 to 2023\n\nWe’ll then present the code for a couple of common plots: a bar chart and population pyramid."
  },
  {
    "objectID": "charts.html#ggplot2",
    "href": "charts.html#ggplot2",
    "title": "\n7  Charts\n",
    "section": "\n7.2 ggplot2",
    "text": "7.2 ggplot2\nThe ggplot2 package is underpinned by the ‘grammar of graphics’ (Wilkinson and Wills 2005). Essentially, every data visualisation has a formal structure with three principle layers: data, aesthetics, and geometry. Variables in your data are mapped to the aesthetic properties (e.g. position, size and colour) of geometric objects like scatter plots or line charts. You can see this in the arguments used by ggplot2:\nggplot(\n  data = df,                                          # data\n  mapping = aes(x = var1, y = var2, colour = var3)    # aesthetics\n  ) +             \n  geom_line()                                         # geometry"
  },
  {
    "objectID": "charts.html#cleaning-data",
    "href": "charts.html#cleaning-data",
    "title": "\n7  Charts\n",
    "section": "\n7.3 Cleaning data",
    "text": "7.3 Cleaning data\nRwanda’s 2023 Vital Statistics Report is accompanied by an Excel file containing data for all of the figures. Table 7.1 contains all the values encoded in Figure 7.1.\n\n\n\n\nTable 7.1: Birth and death registration completeness rates in Rwanda, 2019 to 2023\n\nEvent\n2019\n2020\n2021\n2022\n2023\n\n\n\nBirth registration completeness rate\n87.0\n85.8\n84.2\n92.9\n90.0\n\n\nDeath registration completeness rate\n31.4\n29.9\n26.2\n31.1\n41.8\n\n\n\n\n\n\nBefore we can visualise the data in a line chart we need to transform it from a table into ‘tidy’ data (Wickham 2014). To be tidy the data must satisfy three rules:\n\nEach variable must have its own column\nEach observation must have its own row\nEach value must have its own cell\n\nThe key step to make this data ‘tidy’ is to reshape it into ‘long format’ using the pivot_longer() function from the dplyr package (Wickham et al. 2023). This function converts some of the column names into values of a new variable. In this case, the year column names become the values of a new variable called ‘Year’.\n\ntidy_data &lt;- table |&gt; \n  pivot_longer(-Event, names_to = \"Year\", values_to = \"Value\")\n\n\n\n\n\nTable 7.2: Data structured in long format\n\nEvent\nYear\nValue\n\n\n\nBirth registration completeness rate\n2019\n87.0\n\n\nBirth registration completeness rate\n2020\n85.8\n\n\nBirth registration completeness rate\n2021\n84.2\n\n\nBirth registration completeness rate\n2022\n92.9\n\n\nBirth registration completeness rate\n2023\n90.0\n\n\nDeath registration completeness rate\n2019\n31.4\n\n\nDeath registration completeness rate\n2020\n29.9\n\n\nDeath registration completeness rate\n2021\n26.2\n\n\nDeath registration completeness rate\n2022\n31.1\n\n\nDeath registration completeness rate\n2023\n41.8\n\n\n\n\n\n\nLastly, we need to check that the variables are in the correct format.\n\nglimpse(tidy_data)\n\nRows: 10\nColumns: 3\n$ Event &lt;chr&gt; \"Birth registration completeness rate\", \"Birth registration comp…\n$ Year  &lt;chr&gt; \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2019\", \"2020\", \"2021\", …\n$ Value &lt;dbl&gt; 87.00, 85.80, 84.20, 92.90, 90.04, 31.40, 29.90, 26.20, 31.10, 4…\n\n\nWe can see that the ‘Year’ variable has been stored as a character rather than as a numeric variable. This will cause us problems when we map this variable to the chart’s x-axis. To rectify this we can use the mutate() function to convert ‘Year’ to an integer.\n\ntidy_data &lt;- tidy_data |&gt; \n  mutate(Year = as.integer(Year))\n\nLet’s check to see if that worked.\n\n\nRows: 10\nColumns: 3\n$ Event &lt;chr&gt; \"Birth registration completeness rate\", \"Birth registration comp…\n$ Year  &lt;int&gt; 2019, 2020, 2021, 2022, 2023, 2019, 2020, 2021, 2022, 2023\n$ Value &lt;dbl&gt; 87.00, 85.80, 84.20, 92.90, 90.04, 31.40, 29.90, 26.20, 31.10, 4…\n\n\nWhile we are formatting the data we might also abbreviate the values contained in the ‘Event’ variable from ‘Birth registration completeness rate’ to simply ‘Births’. We can do this using mutate() and the str_detect() function from the stringr package which detects the presence of a pattern in a string. Here we overwrite the value in the ‘Event’ column with ‘Births’ if we str_detect() the pattern ‘Birth’ and with ‘Deaths’ if we don’t.\n\ntidy_data &lt;- tidy_data |&gt; \n  mutate(Event = ifelse(str_detect(Event, \"Birth\"), \"Births\", \"Deaths\"))\n\nLet’s look again at the data.\n\n\n\n\nTable 7.3: Abbreviated ‘Event’ values\n\nEvent\nYear\nValue\n\n\n\nBirths\n2019\n87.0\n\n\nBirths\n2020\n85.8\n\n\nBirths\n2021\n84.2\n\n\nBirths\n2022\n92.9\n\n\nBirths\n2023\n90.0\n\n\nDeaths\n2019\n31.4\n\n\nDeaths\n2020\n29.9\n\n\nDeaths\n2021\n26.2\n\n\nDeaths\n2022\n31.1\n\n\nDeaths\n2023\n41.8\n\n\n\n\n\n\nWe are now ready to visualise the data in a line chart."
  },
  {
    "objectID": "charts.html#creating-a-plot",
    "href": "charts.html#creating-a-plot",
    "title": "\n7  Charts\n",
    "section": "\n7.4 Creating a plot",
    "text": "7.4 Creating a plot\nLoad the data and map variables\nFirst we pass the data to a ggplot() object and map the ‘Year’ variable to the x-axis, ‘Value’ to the y-axis, and ‘Event’ to colour. Each argument is within the aes() function because the variables are mapped to the aesthetics or visual properties of the line chart. We can see that the values have been mapped to the axes because they have been scaled but there are no lines …\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event))\n\n\n\n\n\n\n\n\n\n\nAdd lines\nTo add lines we need to specify a geom. In this case we simply add geom_line().\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe are using + rather than the conventional |&gt; because ggplot2 predates the pipe operator.\n\n\nChange the line width\nOne of the arguments of geom_line() is linewidth which we can adjust to suit.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2)\n\n\n\n\n\n\n\n\n\n\nChange the line colours\nWe can specify which colours to map to the values of the ‘Event’ variable using the scale_colour_manual() function. You could also choose a ColorBrewer palette or even colours from a Wes Anderson film. The Okabe-Ito palette is particularly recommended because they are colour-blind friendly.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2) +\n  scale_colour_manual(values = c(\"Births\" = \"#fc6721\", \"Deaths\" = \"#E7B800\")) \n\n\n\n\n\n\n\n\n\n\nFormat the scale\nWe can modify the y-axis with arguments from the scale_y_continuous() function. First we need to format the y-axis labels as percentages. There is a handy function from the scales package called label_percent() which we can use. Since the values of the ‘Value’ variable are already percentages we need to add the argument scale = 1 to prevent the function from multiplying by 100.\nWe can also set the limits of the y-axis to begin at zero and end at 100.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2) +\n  scale_colour_manual(values = c(\"Births\" = \"#fc6721\", \"Deaths\" = \"#E7B800\")) +\n  scale_y_continuous(limits = c(0,100), labels = scales::label_percent(scale = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe :: syntax is a neat way of using a function from another package without needing to load it beforehand with library(scales).\n\n\nAdd labels\nAdding labels is very intuitive with the labs() function. You can specify NULL if you don’t want to label a particular part of the chart. Here we have dropped the axis and legend labels but specified a title, subtitle and caption.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2) +\n  scale_colour_manual(values = c(\"Births\" = \"#fc6721\", \"Deaths\" = \"#E7B800\")) +\n  scale_y_continuous(limits = c(0,100), labels = scales::label_percent(scale = 1)) +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Birth and death registration completeness rates\",\n       subtitle = \"Rwanda, 2019-2023\",\n       caption = \"Source: CRVS system\",\n       colour = NULL)\n\n\n\n\n\n\n\n\n\n\nAdd a theme\nA theme is an overall plot style. Here we use theme_minimal() which removes the grey background and axis ticks. The base_size argument allows us to resize the overall font size of the labels.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2) +\n  scale_colour_manual(values = c(\"Births\" = \"#fc6721\", \"Deaths\" = \"#E7B800\")) +\n  scale_y_continuous(limits = c(0,100), labels = scales::label_percent(scale = 1)) +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Birth and death registration completeness rates\",\n       subtitle = \"Rwanda, 2019-2023\",\n       caption = \"Source: CRVS system\",\n       colour = NULL) +\n  theme_minimal(base_size = 14)\n\n\n\n\n\n\n\n\n\n\nFinal tweaks\nNext we’ll remove unnecessary grid lines and move the legend to the bottom of the plot. There are several other options available using the theme() function.\nWe can also move the y-axis labels to the right side so that the latest values are easier to read. This is achieved by adding the argument position = \"right\" in the scale_y_continuous() function.\n\n\n\nggplot(tidy_data, aes(x = Year, y = Value, colour = Event)) +\n  geom_line(linewidth = 1.2) +\n  scale_colour_manual(values = c(\"Births\" = \"#fc6721\", \"Deaths\" = \"#E7B800\")) +\n  scale_y_continuous(limits = c(0,100), labels = scales::label_percent(scale = 1), position = \"right\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Birth and death registration completeness rates\",\n       subtitle = \"Rwanda, 2019-2023\",\n       caption = \"Source: CRVS system\",\n       colour = NULL) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    legend.position = \"bottom\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can add expand = expansion() in scale_y_continuous to reduce the gap between the x-axis labels and the axis line.\n\n\nSave the plot\nLastly we can export the plot as a PNG and set the resolution to 300 dpi which is perfect for printing.\n\nggsave(\"plot.png\", scale = 1, dpi = 300)"
  },
  {
    "objectID": "charts.html#other-chart-types",
    "href": "charts.html#other-chart-types",
    "title": "\n7  Charts\n",
    "section": "\n7.5 Other chart types",
    "text": "7.5 Other chart types\nThe ggplot2 package is extremely versatile and be used to create all sorts of data visualisations. A couple of examples are shown below using data published alongside Rwanda’s 2023 Vital Statistic report. Comments have been added to the code to help explain the additional steps involved.\n\n7.5.1 Bar charts\nThe bar chart ranks the districts of Rwanda by the count of recorded live births in 2023. It is a simple alternative to a choropleth map requiring little data transformation or additional code except the use of geom_col().\n\n\n\n\nTable 7.4: Registered live births by mothers’ residence district in Rwanda, 2023\n\nDistrict\nValue\n\n\n\nBugesera\n7212\n\n\nBurera\n4651\n\n\nGakenke\n4086\n\n\nGasabo\n11837\n\n\nGatsibo\n6855\n\n\nGicumbi\n5699\n\n\n\n\n\n\n\n\n\nggplot(births_by_district, aes(x = Value, y = forcats::fct_reorder(District, Value))) +\n  geom_col(fill = \"seagreen\") +\n  scale_x_continuous(expand = expansion(), labels = scales::comma) +\n  labs(x = NULL, y = NULL,\n       title = \"Registered live births by mothers’ residence district\",\n       subtitle = \"Rwanda, 2023\",\n       caption = \"Source: CRVS system\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\n\n\n7.5.2 Population pyramid\nThere is no specific geom for creating population pyramids in ggplot2. Here we create a back-to-back bar chart using geom_col(). You will notice that we change the values of ‘Male’ to negative so that they map to the x-axis in reverse.\n\n\n\n\nTable 7.5: Age-sex structure of all registered deaths in Rwanda, 2023\n\nAge\nSex\nValue\n\n\n\n0-4\nFemale\n18.2\n\n\n0-4\nMale\n17.4\n\n\n5-9\nFemale\n1.5\n\n\n5-9\nMale\n1.6\n\n\n10-14\nFemale\n1.0\n\n\n10-14\nMale\n1.2\n\n\n\n\n\n\n\n\n\nggplot(deaths, \n       # change values of 'Male' to negative\n       aes(x = ifelse(Sex == \"Male\", -Value, Value), \n           y = Age, fill = Sex)) + \n  # adjust transparency\n  geom_col(alpha = 0.8) + \n  scale_x_continuous(\n    # set x-axis limits\n    limits = c(-30, 30),\n    # set x-axis scale\n    breaks = seq(-30, 30, 10),\n    # add % sign to x-axis labels\n    labels = function(x) {paste0(abs(x), '%')}\n    ) + \n  # choose appropriate colours\n  scale_fill_manual(values = c(\"Female\" = \"#7E105E\", \"Male\" = \"#009087\")) + \n  labs(x = NULL, y = NULL,\n       title = \"Age-sex structure of all registered deaths\",\n       subtitle = \"Rwanda, 2023\",\n       caption = \"Source: CRVS systems\",\n       # drop legend title\n       fill = \"\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\n———. 2016. “Ggplot2: Elegant Graphics for Data Analysis.” https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. “Dplyr: A Grammar of Data Manipulation.” https://CRAN.R-project.org/package=dplyr.\n\n\nWilkinson, Leland, and Graham Wills. 2005. The Grammar of Graphics. 2nd ed. Statistics and Computing. New York: Springer."
  },
  {
    "objectID": "choropleth_maps.html#introduction",
    "href": "choropleth_maps.html#introduction",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.1 Introduction",
    "text": "8.1 Introduction\nChoropleth or thematic maps visualise the variation in the values of a variable across geographical areas by encoding them in a colour gradient. Alternative graphics such as a bar or lollipop chart could be used to show the data but they lack potentially important spatial information. A choropleth map allows you to begin to identify hotspot areas and clusters of high or low values.\nHowever, there are three key issues to consider before choosing to display your data in a choropleth map.\n1. Counts or rates\nChoropleth maps that visualise the distribution of counts are sensitive to population size. The population distribution will be mapped rather than the variable of interest. It is therefore recommended to map rates or percentages so that the population at risk is accounted for.\n2. Modifiable Areal Unit Problem\nThe Modifiable Areal Unit Problem or MAUP (Openshaw, 1984) points out that the spatial distribution of values in a choropleth map may be a function of the size and shape of geographical areas. There is not much that we can do about MAUP but we need to be aware of its potential impact.\n3. Classification schemes\nDifferent classification schemes can produce very different choropleth maps (see below). As the distibution of a histogram is sensitive to the size of its bins so the spatial distribution visualised in a choropleth map can be affected by its intervals. It is good practice to inspect the values of your variable in a histogram before deciding which classification scheme to adopt."
  },
  {
    "objectID": "choropleth_maps.html#getting-started",
    "href": "choropleth_maps.html#getting-started",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.2 Getting started",
    "text": "8.2 Getting started\nThe main package that we will be using to create choropleth maps is the tmap package. To install the package you can run:\n\ninstall.packages(\"tmap\")\n\nWe will also be using the sf package to load spatial data, RColorBrewer for colour palettes and dplyr for data manipulation.\n\nlibrary(tmap)\nlibrary(sf)\nlibrary(RColorBrewer)\nlibrary(dplyr)"
  },
  {
    "objectID": "choropleth_maps.html#sourcing-geospatial-data",
    "href": "choropleth_maps.html#sourcing-geospatial-data",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.3 Sourcing geospatial data",
    "text": "8.3 Sourcing geospatial data\nSubnational administrative boundaries are available from two sources: GADM and Natural Earth. The data are free to use for non-commercial purposes.\n\n8.3.1 GADM\nYou can either download administrative boundary files using the geodata package or directly from the GADM website. The function gadm() has two key arguments. You need to supply the three-letter ISO code to country and choose a level of administrative subdivision. 0 is the value for country and 1 is for the next administrative level down.\nThe code below loads the states of Nigeria.\n\nlibrary(geodata)\nnigeria &lt;- gadm(country = \"NGA\",  level = 1,  path = tempdir(), version = \"latest\")\n\nIf you prefer to download the files manually from the website you need to select ‘Nigeria’ from the country dropdown and then choose a file format. GeoJSON is an open, non-proprietary format that is used across the Web. There are three administrative divisions available:\n0 National\n1 States (36 + Federal Capital Territory)\n2 Local Government Areas (774)\nWe will download ‘level 1’ in GeoJSON format by copying the URL and unzipping it. We can then use the st_read() function from the sf package to load the file into the R session. The sf package converts the GeoJSON file into a simple features object, a data frame with features stored in rows and attributes in columns. The feature geometries of the object are stored in a list-column at the end. These are the coordinates that describe the boundary of each state.\n\ndownload.file(\"https://geodata.ucdavis.edu/gadm/gadm4.1/json/gadm41_NGA_1.json.zip\",\n              \"gadm41_NGA_1.json.zip\")\nunzip(\"gadm41_NGA_1.json.zip\")\nnigeria &lt;- st_read(\"gadm41_NGA_1.json\")\n\n\n8.3.2 Natural Earth\nLevel 1 administrative boundaries are available from Natural Earth using the ne_states() function from the rnaturalearth package.\n\nlibrary(rnaturalearth)\nnigeria &lt;- ne_states(country = \"nigeria\", returnclass = \"sf\")\n\nYou can also download subnational boundaries directly from the Natural Earth website. If you scroll down to ‘Admin 1 – States, Provinces’ you can download the ESRI shapefile of first-order administrative boundaries for a number of countries. To obtain the states of Nigeria we need to filter the results by the ISO code.\n\ndownload.file(\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_1_states_provinces.zip\", \"ne_10m_admin_1_states_provinces.zip\")\nunzip(\"ne_10m_admin_1_states_provinces.zip\")\nnigeria &lt;- st_read(\"ne_10m_admin_1_states_provinces.shp\") |&gt; \n  filter(adm0_a3 == \"NGA\")"
  },
  {
    "objectID": "choropleth_maps.html#loading-geospatial-data",
    "href": "choropleth_maps.html#loading-geospatial-data",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.4 Loading geospatial data",
    "text": "8.4 Loading geospatial data\nOn loading with st_read(), the R console prints out the number of features, the geometry type, dimensions, bounding box, and coordinate reference system (CRS). We can confirm that there are 37 features (states) and that the vector boundary layer is projected in the World Geodetic System 1984 (WGS84), with longitude and latitude units of decimal degrees.\n\nnigeria &lt;- st_read(\"data/nigeria.geojson\")\n#&gt; Reading layer `nigeria' from data source \n#&gt;   `C:\\Users\\partrh\\GitHub\\r4vs\\data\\nigeria.geojson' using driver `GeoJSON'\n#&gt; Simple feature collection with 37 features and 1 field\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 2.671082 ymin: 4.272162 xmax: 14.66994 ymax: 13.88029\n#&gt; Geodetic CRS:  WGS 84\n\nWe can visualise the state boundaries using the base R plot() function. We just need to supply the geometry column.\n\nplot(nigeria$geometry)"
  },
  {
    "objectID": "choropleth_maps.html#plotting-in-tmap",
    "href": "choropleth_maps.html#plotting-in-tmap",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.5 Plotting in tmap",
    "text": "8.5 Plotting in tmap\nWe can also use the tmap package to plot the state boundaries. Combining the tm_shape() and tm_borders() functions renders the outlines of each state.\n\ntm_shape(nigeria) +\n  tm_borders()\n\n\n\n\n\n8.5.1 Style borders\nThe borders can be styled by passing col (colour) and lwd (border line width) arguments to the tm_borders() function.\n\ntm_shape(nigeria) + \n  tm_borders(col = \"#000000\", lwd = 0.5)\n\n\n\n\n\n8.5.2 Labelling\nEach state can be labelled using the tm_text() function. Again, we supply various arguments to style the labels. The argument auto.placement ensures that labels don’t sit on top of each other.\n\ntm_shape(nigeria) + \n  tm_borders(col = \"#000000\", lwd = 0.5) +\n  tm_text(\"state\", \n          size = 0.8,\n          col = \"black\",\n          auto.placement = TRUE)\n\n\n\n\nIf you want to only label specific states you can use a filter.\n\ntm_shape(nigeria) + \n  tm_borders(col = \"#000000\", lwd = 0.5) +\n  tm_shape(nigeria |&gt; filter(state %in% c(\"Federal Capital Territory\",\"Jigawa\",\"Lagos\",\"Sokoto\"))) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE)"
  },
  {
    "objectID": "choropleth_maps.html#joining-data",
    "href": "choropleth_maps.html#joining-data",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.6 Joining data",
    "text": "8.6 Joining data\nWe have the boundaries of each state in Nigeria but we need some statistical data to create a choropleth map. We will be using data provided by the 2021 Nigeria Multiple Indicators Cluster Survey (MICS) on the percentage of children under age 5 whose births are registered by each Nigerian state.\n\nhead(df)\n#&gt; # A tibble: 6 × 2\n#&gt;   state     percent\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;\n#&gt; 1 Abia         66.8\n#&gt; 2 Adamawa      79.7\n#&gt; 3 Akwa Ibom    72.1\n#&gt; 4 Anambra      86.5\n#&gt; 5 Bauchi       38.3\n#&gt; 6 Bayelsa      28.2\n\nBoth our spatial data and our birth registration data share a matching state variable which we can use to join the datasets. To check that all of the state names are consistent between datasets we can run an anti join.\n\nanti_join(nigeria, df, by = \"state\")\n#&gt; Simple feature collection with 1 feature and 1 field\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 6.749594 ymin: 8.404707 xmax: 7.628196 ymax: 9.351419\n#&gt; Geodetic CRS:  WGS 84\n#&gt;                       state                       geometry\n#&gt; 1 Federal Capital Territory MULTIPOLYGON (((6.978107 8....\n\nWe can see that the ‘Federal Capital Territory’ in the spatial data has no match in the birth registration data. This is because the state is recorded as ‘FCT Abuja’ in the other dataset. We can fix this by recoding the state name in the spatial data.\n\nnigeria &lt;- nigeria |&gt; \n  mutate(state = case_when(\n    state == \"Federal Capital Territory\" ~ \"FCT Abuja\",\n    TRUE ~ state)\n    )\n\nWe can now run the left_join() function to join the two datasets together.\n\nsf &lt;- left_join(nigeria, df, by = \"state\")\n\nWhen left_join() fails to find a match it enters a missing value in the corresponding row. We can therefore check that the join has worked by filtering out any missing values.\n\nfilter(sf, is.na(percent))\n#&gt; Simple feature collection with 0 features and 2 fields\n#&gt; Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\n#&gt; Geodetic CRS:  WGS 84\n#&gt; [1] state    percent  geometry\n#&gt; &lt;0 rows&gt; (or 0-length row.names)\n\nNow we are ready to create a choropleth map."
  },
  {
    "objectID": "choropleth_maps.html#basic-choropleth",
    "href": "choropleth_maps.html#basic-choropleth",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.7 Basic choropleth",
    "text": "8.7 Basic choropleth\nThe tm_polygons() function creates an off-the-shelf choropleth map. You just supply the name of the variable that you want to visualise to col and a title for the legend.\n\ntm_shape(sf) + \n  tm_polygons(col = \"percent\", \n              title = \"% registered\")\n\n\n\n\nTo have finer control over the choropleth map it is better to use a combination of tm_borders() and tm_fill(). This allows us to style the borders.\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_fill(col = \"percent\", title = \"% registered\")\n\n\n\n\nThe default colour palette is orange and the map classification is ‘pretty’. We can change these next."
  },
  {
    "objectID": "choropleth_maps.html#colour-palettes",
    "href": "choropleth_maps.html#colour-palettes",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.8 Colour palettes",
    "text": "8.8 Colour palettes\ntmap uses colour palettes from the ColorBrewer website which differ depending on the chosen sequential, diverging, or categorical colour scheme. If we wanted to show how the birth registration values are spread around the mean we could use colour palettes for a diverging scheme. However, we will use a palette from the sequential colour scheme because we want to visual the distribution of values from low to high. Here we will use the “Blues” palette which visualises low values as light blue and high values as dark blue.\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",\n          palette = \"Blues\",\n          title = \"% registered\")"
  },
  {
    "objectID": "choropleth_maps.html#classes",
    "href": "choropleth_maps.html#classes",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.9 Classes",
    "text": "8.9 Classes\nWhen map classification breaks are not set explicitly tmap defaults to style = \"pretty\". This is a base R function which calculates roughly equal spaced round values. However, tmap has a number of other map classification schemes to choose from.\n\n8.9.1 Equal interval\nDivides the distribution of values so that the range of values is identical within each class. The difference between the highest and lowest value is the same for each class grouping.\n+ represents the density of observations around the mean- maps tend to be unbalanced because the values aren’t evenly distributed.\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",\n          style = \"equal\",\n          n = 4,\n          palette = \"Blues\",\n          title = \"% registered\")\n\n\n\n\n\n8.9.2 Quantile\nSorts the values of a variable in ascending order and assigns an equal number of geographical areas to each colour.\n+ highlights a proportion of observations such as the top 25% of geographical areas- tends to mask heterogeneity\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",\n          style = \"quantile\",\n          n = 4,\n          palette = \"Blues\",\n          title = \"% registered\")\n\n\n\n\n\n8.9.3 Natural breaks (jenks)\nClass categories are based on natural groupings in the data. Uses a statistical procedure which seeks to reduce the variance within classes and maximises the variance between classes.\n+ identifies areas with similar values- the classes are unique to each variable so cannot be reused with other variables\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",\n          style = \"jenks\",\n          n = 4,\n          palette = \"Blues\",\n          title = \"% registered\")\n\n\n\n\n\n8.9.4 Custom breaks\nCustom map classifications can be created by supplying breaks and labels to the tm_fill() function.\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",\n          breaks = c(0,40,58,76,Inf),\n          palette = \"Blues\",\n          labels = c(\" &lt; 40%\", \" 40 - 58%\", \" 58 - 76%\", \" &gt; 76%\"),\n          title = \"Total registered\")"
  },
  {
    "objectID": "choropleth_maps.html#customisation",
    "href": "choropleth_maps.html#customisation",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.10 Customisation",
    "text": "8.10 Customisation\nThere are several improvements we can make to the choropleth map by changing the layout, adding titles and tweaking the legend.\n\ntm_shape(sf) + \n  tm_borders(col = \"#FFFFFF\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.6, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\", title = \"% registered\", style = \"jenks\", n = 4, palette = \"Blues\") + \n  tm_layout(frame = FALSE,\n            main.title = \"Levels of birth registration in Nigeria\",\n            main.title.size = 1.2,\n            legend.outside = TRUE) +\n  tm_credits(\"Source: MICS, 2021\", \n             bg.color = \"white\",\n             position = c(\"right\", \"bottom\"))\n\n\n\n\nYou can also add in some cartographic elements such as a compass rose (tm_compass()) or scale bar (tm_scale_bar()) if required."
  },
  {
    "objectID": "choropleth_maps.html#interactivity",
    "href": "choropleth_maps.html#interactivity",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.11 Interactivity",
    "text": "8.11 Interactivity\nThe tmap package also allows you to view your maps interactively. All you need to do is to switch between tmap_mode(\"view\") for interactive viewing and tmap_mode(\"plot\") for static plots."
  },
  {
    "objectID": "choropleth_maps.html#exporting-maps",
    "href": "choropleth_maps.html#exporting-maps",
    "title": "\n8  Choropleth maps\n",
    "section": "\n8.12 Exporting maps",
    "text": "8.12 Exporting maps\nTo export static maps you can use the tmap_save() function. Just save your plot as an object and give it a filename.\n\ntm &lt;- tm_shape(sf) + \n  tm_borders(col = \"#000000\", lwd = 0.5) +\n  tm_text(\"state\", size = 0.8, col = \"black\", auto.placement = TRUE) +\n  tm_fill(col = \"percent\",  style = \"jenks\", n = 4, palette = \"Blues\", title = \"% registered\", alpha = 0.3)\n\ntmap_save(tm, filename = \"nigeria.png\")"
  },
  {
    "objectID": "git_and_github.html#git",
    "href": "git_and_github.html#git",
    "title": "\n9  Git and GitHub\n",
    "section": "\n9.1 Git",
    "text": "9.1 Git\nGit is a piece of version control software written by Linus Torvalds, the creator of Linux. It essentially tracks changes to local files.\nLet’s say that you’ve written some R code that visualises the total fertility rate in Nigeria. You’ve saved the R script (script.R) in a folder called ‘vital_statistics’ and the dataset (fertility_rate.csv) in a new subfolder called ‘data’. The resulting plot is stored in the ‘outputs’ folder.\n.\n└── vital_statistics\n    ├── script.R\n    ├── data\n    │   ├── fertility_rate.csv\n    ├── outputs\n\n\n\nlibrary(tidyverse) ; library(ggtext)\n\ndf &lt;- read_csv(\"data/fertility_rate.csv\") |&gt; \n  mutate(year = ymd(year, truncated = 2L))\n\nggplot(df, aes(x = year, y = value)) + \n  geom_line(colour = \"#CC79A7\", linewidth = 1) + \n  scale_x_date(expand = expansion(),\n               breaks = seq.Date(as.Date(\"1960-01-01\"), as.Date(\"2100-01-01\"), by = \"20 years\"),\n               date_labels = \"%Y\") + \n  scale_y_continuous(limits = c(0,10),\n                     labels = scales::label_number(accuracy = 1, scale_cut = scales::cut_short_scale())) +\n  labs(x = NULL, y = \"Births per woman\",\n       title = \"Total fertility rate\",\n       subtitle = \"&lt;span style = 'color:#757575;'&gt;Nigeria, 1953 to 2100&lt;/span&gt;\",\n       caption = \"Source: U.S. Census Bureau, International Database\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.margin = unit(rep(1, 4), \"cm\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.line.x = element_line(colour = \"#000000\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\"),\n    plot.subtitle = element_markdown(margin = margin(b = 15)),\n    plot.caption = element_text(size = rel(0.8), colour = \"#707071\", margin = margin(t = 20)),\n    axis.title.y = element_text(size = rel(0.8), hjust = 0, margin = margin(r = 10))\n  ) \n\nggsave(\"outputs/plot.jpeg\", dpi = 300, scale = 1)\n\n\n\n\n\n\n\n\n\n\nHowever, you’ve been told to compare Nigeria’s fertility rate with Rwanda’s. This is where git comes in. Rather than creating a new file or overwriting it you can just track your file changes with Git.\n\nNavigate to the Terminal tab in the Console pane of RStudio. You can also use the Command Prompt or PowerShell in Windows or the Terminal on a Mac.\nGo to the folder containing your code and data: cd /path/to/your/folder\n\nInitialise the folder as a git repository or repo: git init.\nCheck which files are currently untracked: git status\n\n\n$ git status\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        data/\n        outputs/\n        script.R\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nWe have two empty folders and one file (script.R) that are currently untracked.\n\nPut the files in the staging area: git add -A\n\nThen take a snapshot with git commit\n\n\n\n\n\n\n\n\nGit commit messages\n\n\n\nIt is good practice to add a descriptive message to each commit. For example, we might add git commit -m \"Nigeria fertility rate\". When we look back through the history of our commits we can then see at a glance what changes we made to the code.\n\n\nThen we can update our R code so that we can compare the historic and projected trend in fertility rates between Nigeria and Rwanda.\n\n\n\nlibrary(tidyverse) ; library(ggtext)\n\ndf &lt;- read_csv(\"data/fertility_rate.csv\") |&gt; \n  mutate(year = ymd(year, truncated = 2L),\n         position = if_else(name == \"Nigeria\", 0, 0.4))\n\nggplot(df, aes(x = year, y = value)) + \n  geom_line(aes(colour = name), linewidth = 1, show.legend = FALSE) + \n  geom_text(data = filter(df, year == max(year)),\n            aes(label = name, colour = name, vjust = position),\n            hjust = -0.1, fontface = \"bold\",\n            show.legend = FALSE) +\n  scale_colour_manual(values = c(\"Nigeria\" = \"#CC79A7\", \"Rwanda\" = \"#009E73\")) +\n  scale_x_date(expand = expansion(),\n               breaks = seq.Date(as.Date(\"1960-01-01\"), as.Date(\"2100-01-01\"), by = \"20 years\"),\n               date_labels = \"%Y\") + \n  scale_y_continuous(limits = c(0,10),\n                     labels = scales::label_number(accuracy = 1, scale_cut = scales::cut_short_scale())) +\n  labs(x = NULL, y = \"Births per woman\",\n       title = \"Total fertility rate\",\n       subtitle = \"&lt;span style = 'color:#757575;'&gt;Nigeria and Rwanda, 1953 to 2100 (projected)&lt;/span&gt;\",\n       caption = \"Source: U.S. Census Bureau, International Database\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.margin = margin(0.5,2.5,0.5,0.5,\"cm\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.line.x = element_line(colour = \"#000000\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\"),\n    plot.subtitle = element_markdown(margin = margin(b = 15)),\n    plot.caption = element_text(size = rel(0.8), colour = \"#707071\", margin = margin(t = 20)),\n    axis.title.y = element_text(size = rel(0.8), hjust = 0, margin = margin(r = 10))\n  ) +\n  coord_cartesian(clip = \"off\")\n\nggsave(\"outputs/plot.jpeg\", dpi = 300, scale = 1)\n\n\n\n\n\n\n\n\n\n\nTo track these changes we’d follow these steps.\n\nCheck that you have file changes: git status\n\n\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   data/fertility_rate.csv\n        modified:   outputs/plot.jpeg\n        modified:   script.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nWe have updated our dataset with values for Rwanda (fertility_rate.csv), created a new plot (plot.jpeg) and revised our R script (script.R).\n\nPut the changes in the staging area: git add -A\n\nCommit the changes: git commit -m \"Compare with Rwanda\"\n\nCheck that everything has been committed: git status\n\n\n\n\n\n\n\n\n.gitignore\n\n\n\nA .gitignore is a text file that lists all of the files and folders that you don’t want tracked by Git. For example, this list could include datasets that contain sensitive data. Listing files to .gitignore is especially important if you intend to host files on GitHub. To create a .gitignore file just enter touch .gitignore into the terminal. You can either edit the file in the terminal or in a text editor. If you want to add a file using the terminal you can enter echo FILENAME &gt;&gt; .gitignore.\n\n\nRather than overwriting your file with different file names you now have a linear history of commits for the same file. To visualise the history of your commits you can type git log --reverse --pretty=format:'| %H | %s |' into the Terminal. This prints out the commit hash, a unique identifier for each commit, alongside the commit messages.\n$ git log --reverse --pretty=format:'| %H | %s |'\n| b7ab60ae6fae9c6263ff36fd4fcda4f8be874683 | Nigeria fertility rate |\n| d2faa1a7784fad0524dc33a8585f8cf7c8340b9c | Compare with Rwanda |\nThe glossary below lists some of the most common terms and Git commands.\n\nCommon terms and Git commands\n\n\n\n\n\n\nrepo\nproject folder\n\n\nremote\na repo available to all team members\n\n\nclone\nget repo from remote\n\n\nstage\nprepare files for commit\n\n\ncommit\ntake a snapshot of a file or files\n\n\nhash\ncommit id\n\n\npull\nget commits from a repo\n\n\npush\nsend commits to a repo\n\n\nbranch\nsandbox in a repo\n\n\nmain\ndefault branch where live code sits\n\n\nmerge\ncombine all commits on branches\n\n\nmerge conflict\nconflict contradictory file changes\n\n\npull\nrequest propose changes to remote repo"
  },
  {
    "objectID": "git_and_github.html#github",
    "href": "git_and_github.html#github",
    "title": "\n9  Git and GitHub\n",
    "section": "\n9.2 GitHub",
    "text": "9.2 GitHub\nGitHub is a website and service that hosts Git repositories, where developers can store, share, and collaborate on their projects.\nBefore you can add your local repo to GitHub you need to create a remote repo on GitHub.\n\nCreate a new repo called vital_statistics. There is no need to add a README file, licence or a .gitignore file at this stage. Click through to ‘Create repository’.\nNavigate to ‘Quick setup — if you’ve done this kind of thing before’ on the subsequent page and copy the remote repository URL. It will something look like https://github.com/USERNAME/vital_statistics.git\n\nNext, open the terminal and ensure that it is pointing to the current folder. To print the name of the current folder just enter pwd\n\nNow enter git remote add origin REMOTE-URL into the terminal replacing REMOTE-URL with the remote repository URL from step 2.\nTo check that the correct URL has been set enter git remote -v\n\nThen push the changes you have made to your local repo to GitHub enter git push origin master You should now see all your code and subfolders on GitHub.\n\n\n\n\n\n\n\nBranches\n\n\n\nIf you are collaborating with others it is generally a good idea to create what’s called a branch. This is essentially a sandbox for rough workings out. The working code is on the ‘main’ branch but the draft, experimental code is held on a separate branch.\nThese are the steps that you might follow:\n\nCreate a branch: git branch development\n\nSwitch to the development branch: git checkout development\n\nPush changes to the remote branch: git push origin development\n\n\n\n\nIf you are collaborator on this project and want to copy or fork the GitHub repository for you to work on locally you can follow these steps.\n\nSet you working folder e.g. cd /path/to/your/folder\n\n\nClone the remote repo in the current directory by entering git clone https://github.com/USERNAME/vital_statistics.git This is the same remote repository URL that we used earlier."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Appendix A — Glossary of Terms",
    "section": "",
    "text": "This page will cover some commonly used terms throughout this book. Hopefully this provides some clarity on what is meant and can also serve as a glossary for new people to the CRVS space.\n\nCRVS: Civil Registration Vital Statistics\nNRO: National Registration Office\nNSO: National Statistics Office"
  },
  {
    "objectID": "resources.html#crvs",
    "href": "resources.html#crvs",
    "title": "Appendix B — Resources",
    "section": "B.1 CRVS",
    "text": "B.1 CRVS\n\nB.1.1 Guidance\n\nUNICEF. (2013). Every Child’s Birth Right: Inequities and trends in birth registration. https://data.unicef.org/resources/every-childs-birth-right-inequities-and-trends-in-birth-registration/\nUnited Nations. (2014). Principles and Recommendations for a Vital Statistics System - Revision 3. Statistical Papers, Series M No. 19/Rev.3 (pp. 1–224). https://unstats.un.org/unsd/demographic/standmeth/principles/m19rev3en.pdf\nUnited Nations. (2021). Handbook on Civil Registration and Vital Statistics Systems Management, Operation and Maintenance, Revision 1. https://doi.org/10.18356/9789210472173\nVital Strategies, United Nations Economic Commission for Africa, United Nations Economic and Social Commission for Asia and the Pacific, and Statistics Norway. (2020). Production of a Vital Statistics Report: Guide. NY, Vital Strategies. https://www.vitalstrategies.org/wp-content/uploads/Production-of-a-Vital-Statistics-Report-Guide.pdf\nWorld Health Organization. (2013). Strengthening civil registration and vital statistics for births, deaths and causes of death. http://apps.who.int/iris/bitstream/10665/78917/1/9789241504591_eng.pdf.\nWorld Bank and WHO. (2014). Global Civil Registration and Vital Statistics: A Scaling Up Investment Plan 2015-2024. Washington, DC: World Bank. https://openknowledge.worldbank.org/handle/10986/18962\nWorld Bank Group. (2018). Civil Registration and Vital Statistics Systems. [eLearning course]. https://olc.worldbank.org/content/civil-registration-and-vital-statistics-systems-basic-level-self-paced-format\n\n\n\nB.1.2 Academic papers\n\nAbouZahr, C., De Savigny, D., Mikkelsen, L., Setel, P. W., Lozano, R., & Lopez, A. D. (2015). “Towards universal civil registration and vital statistics systems: the time is now”. The Lancet, 386(10001), 1407–1418. https://doi.org/10.1016/S0140-6736(15)60170-2\nCobos Muñoz, D., Abouzahr, C., & De Savigny, D. (2018). “The ‘Ten CRVS Milestones’ framework for understanding Civil Registration and Vital Statistics systems”. BMJ Global Health, 3(2), e000673. https://doi.org/10.1136/bmjgh-2017-000673\nMikkelsen, L., Richards, N., AbouZahr, C., Adair, T., Lopez, A. D., & deSavigny, D. (2018). “A framework for evaluating national CRVS systems at baseline.” Melbourne: Bloomberg Philanthropies Data for Health Initiative, Civil Registration and Vital Statistics Improvement, University of Melbourne. https://crvssystems.ca/framework-evaluating-national-crvs-systems-baseline\nPhillips, D. E., Adair, T., & Lopez, A. D. (2018). “How useful are registered birth statistics for health and social policy? A global systematic assessment of the availability and quality of birth registration data.” Population Health Metrics, 16(1), 21. https://doi.org/10.1186/s12963-018-0180-6\nSuthar, A. B., Khalifa, A., Yin, S., Wenz, K., Ma Fat, D., Mills, S. L., Nichols, E., AbouZahr, C., & Mrkic, S. (2019). “Evaluation of approaches to strengthen civil registration and vital statistics systems: A systematic review and synthesis of policies in 25 countries.” PLOS Medicine, 16(9), e1002929. https://doi.org/10.1371/journal.pmed.1002929"
  },
  {
    "objectID": "resources.html#r",
    "href": "resources.html#r",
    "title": "Appendix B — Resources",
    "section": "B.2 R",
    "text": "B.2 R\n\nB.2.1 General\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2024). R for Data Science. (2nd ed.). O’Reilly Media. https://r4ds.hadley.nz\n\n\n\nB.2.2 Data visualisation\n\nB.2.2.1 Charts\n\nWickham, H., Navarro, D. & and Lin Pedersen, T. (2024). ggplot2: Elegant Graphics for Data Analysis. (3rd ed.). https://ggplot2-book.org\nChang, W. (2024). R Graphics Cookbook. (2nd ed.). https://r-graphics.org\nKrause, A,. Rennie, N., & Tarran, B. (2024, February 1). Best Practices for Data Visualisation. Royal Statistical Society. https://royal-statistical-society.github.io/datavisguide/\nWilke, C. (2024). SDS 375, Data Visualization in R. [Online course]. University of Texas. https://wilkelab.org/SDS375\nScherer, C. (2023, May 15). “A ggplot2 Tutorial for Beautiful Plotting in R.” https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r\nBBC data team. (2019, January 24). “BBC Visual and Data Journalism cookbook for R graphics.” https://bbc.github.io/rcookbook\n\n\n\nB.2.2.2 Maps\n\nAnselin, L. (2016). Statistical Maps: Standard Deviation and Box Map. YouTube. https://www.youtube.com/watch?v=6-weK5J6xRI\nHarris, R. (2022-2023). Mapping and Modelling Geographic Data in R. [eLearning course]. https://profrichharris.github.io/MandM\nLovelace, R., Nowosad, J., & Muenchow, J. (2023). Geocomputation with R. 2nd edition. https://geocompr.robinlovelace.net/index.html\nONS Geography. (2021). Introduction to GIS in R. [eLearning course]. https://onsgeo.github.io/geospatial-training/docs/intro_to_gis_in_r"
  },
  {
    "objectID": "resources.html#git-and-github",
    "href": "resources.html#git-and-github",
    "title": "Appendix B — Resources",
    "section": "B.3 Git and GitHub",
    "text": "B.3 Git and GitHub\n\nBryan, J. (2018b), Happy Git and GitHub for the useR. GitHub. https://happygitwithr.com\nChacon, S., & Straub. B., (2014). Pro Git. Apress. https://git-scm.com/book/en/v2\nPerez-Riverol, Y., Gatto, L., Wang, R., Sachsenberg, T., Uszkoreit, J., Leprevost, F. da V., Fufezan, C., Ternent, T., Eglen, S. J., Katz, D. S., Pollard, T. J., Konovalov, A., Flight, R. M., Blin, K., & Vizcaíno, J. A. (2016). “Ten Simple Rules for Taking Advantage of Git and GitHub”. PLOS Computational Biology, 12(7), e1004947. https://doi.org/10.1371/journal.pcbi.1004947"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Wickham, Hadley. 2014. “Tidy Data.”\nJournal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\n———. 2016. “Ggplot2: Elegant Graphics for Data Analysis.”\nhttps://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. “Dplyr: A Grammar of Data Manipulation.” https://CRAN.R-project.org/package=dplyr.\n\n\nWilkinson, Leland, and Graham Wills. 2005. The Grammar of\nGraphics. 2nd ed. Statistics and Computing. New York: Springer."
  }
]